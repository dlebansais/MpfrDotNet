namespace Test
{
    using Interop.Mpfr;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using MpfrDotNet;
    using MpirDotNet;

    [TestClass]
    public class Pow
    {
        [TestMethod]
        public void Sqrt()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            using mpfr_t a = new mpfr_t("22250983250345029834502983.5740293845720");
            AsString = a.ToString();
            Assert.AreEqual("2.225098325034502799228928E+25", AsString);

            using mpfr_t b = a.Sqrt();
            AsString = b.ToString();
            Assert.AreEqual("4.7170947892050068359375E+12", AsString);

            using mpfr_t c = b * b;

            AsString = c.ToString();
            Assert.AreEqual("2.225098325034502799228928E+25", AsString);
        }

        [TestMethod]
        public void Cbrt()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            using mpfr_t a = new mpfr_t("22250983250345029834502983.5740293845720");
            AsString = a.ToString();
            Assert.AreEqual("2.225098325034502799228928E+25", AsString);

            using mpfr_t b = a.Cbrt();
            AsString = b.ToString();
            Assert.AreEqual("2.8126545943151724338531494140625E+8", AsString);

            using mpfr_t c = b * b;
            using mpfr_t d = c * b;

            AsString = d.ToString();
            Assert.AreEqual("2.2250983250345032287256576E+25", AsString);
        }

        [TestMethod]
        public void NthRoot()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            ulong DefaultPrecision = mpfr_t.DefaultPrecision;
            mpfr_t.DefaultPrecision = 2048;

            using mpfr_t a = new mpfr_t("22250983250345029834502983.5740293845720");
            AsString = a.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 4);
            Assert.AreEqual("2.225098325034502983...E+25", AsString);

            ulong root = 5040625102UL;
            root >>= 1;

            using mpfr_t b = a.NthRoot(root);
            AsString = b.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.000000023157615543...E+0", AsString);

            using mpfr_t c = b.Sqrt();
            AsString = c.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.000000011578807704...E+0", AsString);

            using mpfr_t d = a.NthRoot(root << 1);
            AsString = d.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.000000011578807704...E+0", AsString);

            using mpfr_t e = b.Pow(root);
            AsString = e.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 4);
            Assert.AreEqual("2.225098325034502983...E+25", AsString);

            using mpfr_t f = c.Pow(root << 1);
            AsString = f.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 4);
            Assert.AreEqual("2.225098325034502983...E+25", AsString);

            using mpfr_t g = d.Pow(root << 1);
            AsString = g.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 4);
            Assert.AreEqual("2.225098325034502983...E+25", AsString);

            mpfr_t.DefaultPrecision = DefaultPrecision;
        }

        [TestMethod]
        public void SqrtULong()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            ulong DefaultPrecision = mpfr_t.DefaultPrecision;
            mpfr_t.DefaultPrecision = 2048;

            ulong a = 5040625102UL;

            using mpfr_t b = new();

            mpfr.sqrt_ui(b, a, mpfr_rnd_t.MPFR_RNDN);
            AsString = b.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("7.099735982415120765...E+4", AsString);

            using mpfr_t c = new mpfr_t(a);
            AsString = c.ToString();
            Assert.AreEqual("5.040625102E+9", AsString);

            using mpfr_t d = c.Sqrt();
            AsString = d.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("7.099735982415120765...E+4", AsString);

            mpfr_t.DefaultPrecision = DefaultPrecision;
        }

        [TestMethod]
        public void BasicPow()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            using mpfr_t a = new mpfr_t("22250983250345029834502983.5740293845720");
            AsString = a.ToString();
            Assert.AreEqual("2.225098325034502799228928E+25", AsString);

            using mpfr_t b = new mpfr_t("22298.30594288574029879874539");
            AsString = b.ToString();
            Assert.AreEqual("2.229830594288574138772673904895782470703125E+4", AsString);

            using mpfr_t c = a.Pow(b);

            AsString = c.ToString();
            Assert.AreEqual("8.8604270763516055878742474068479142491907987806803106E+565202", AsString);
        }

        [TestMethod]
        public void PowULong()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            ulong DefaultPrecision = mpfr_t.DefaultPrecision;
            mpfr_t.DefaultPrecision = 2048;

            using mpfr_t a = new mpfr_t("22250983250.3450298345029835740293845720");
            AsString = a.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 4);
            Assert.AreEqual("2.225098325034502983...E+10", AsString);

            using mpfr_t a2 = 1 / a;
            using mpfr_t a3 = 1 + a2;

            ulong b = 5040625102L;

            using mpfr_t c = a3.Pow(b >> 1);
            AsString = c.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.1199314396039264372253958740...E+0", AsString);

            using mpfr_t d = a3.Pow(b);
            AsString = d.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.2542464294133231291486886786...E+0", AsString);

            using mpfr_t e = c * c;
            AsString = e.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.2542464294133231291486886786...E+0", AsString);

            mpfr_t.DefaultPrecision = DefaultPrecision;
        }

        [TestMethod]
        public void PowLong()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            ulong DefaultPrecision = mpfr_t.DefaultPrecision;
            mpfr_t.DefaultPrecision = 2048;

            using mpfr_t a = new mpfr_t("22250983250.3450298345029835740293845720");
            AsString = a.ToString();
            AsString = AsString.Substring(0, 20) + "..." + AsString.Substring(AsString.Length - 4);
            Assert.AreEqual("2.225098325034502983...E+10", AsString);

            using mpfr_t a2 = 1 / a;
            using mpfr_t a3 = 1 + a2;

            long b = 5040625102L;

            using mpfr_t c = a3.Pow(b >> 1);
            AsString = c.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.1199314396039264372253958740...E+0", AsString);

            using mpfr_t d = a3.Pow(b);
            AsString = d.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.2542464294133231291486886786...E+0", AsString);

            using mpfr_t e = c * c;
            AsString = e.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("1.2542464294133231291486886786...E+0", AsString);

            using mpfr_t f = a3.Pow(-b);
            AsString = f.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("7.9729148638497816923324220753...E-1", AsString);

            using mpfr_t g = a3.Pow(-(b >> 1));
            AsString = g.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("8.9291180213108291585559055960...E-1", AsString);

            using mpfr_t h = g * g;
            AsString = h.ToString();
            AsString = AsString.Substring(0, 30) + "..." + AsString.Substring(AsString.Length - 3);
            Assert.AreEqual("7.9729148638497816923324220753...E-1", AsString);

            mpfr_t.DefaultPrecision = DefaultPrecision;
        }

        [TestMethod]
        public void PowZ()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            using mpfr_t a = new mpfr_t("22250983250345029834502983.5740293845720");
            AsString = a.ToString();
            Assert.AreEqual("2.225098325034502799228928E+25", AsString);

            using mpz_t b = new mpz_t("22298");
            AsString = b.ToString();
            Assert.AreEqual("22298", AsString);

            using mpfr_t c = a.Pow(b);

            AsString = c.ToString();
            Assert.AreEqual("1.5581651739453832511769734040031532442192330006796866E+565195", AsString);
        }

        [TestMethod]
        public void ULongPowULong()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            ulong DefaultPrecision = mpfr_t.DefaultPrecision;
            mpfr_t.DefaultPrecision = 128;

            ulong a = 986301247803256UL;
            ulong b = 22298UL;

            using mpfr_t c = mpfr_t.Pow(a, b);

            AsString = c.ToString();
            Assert.AreEqual("2.6648454528258509368192958750583861568875146374566282787273685128980843412803682511185309035148027846524877104517073131365307995E+334336", AsString);

            using mpfr_t d = a;
            using mpfr_t e = d.Log();
            using mpfr_t f = c.Log();
            using mpfr_t g = f / e;
            using mpfr_t h = g.Round();

            AsString = h.ToString();
            Assert.AreEqual("2.2298E+4", AsString);

            mpfr_t.DefaultPrecision = DefaultPrecision;
        }

        [TestMethod]
        public void ULongPow()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            ulong DefaultPrecision = mpfr_t.DefaultPrecision;
            mpfr_t.DefaultPrecision = 128;

            ulong a = 986301247803256UL;

            using mpfr_t b = new mpfr_t("22298.30594288574029879874539");
            AsString = b.ToString();
            Assert.AreEqual("2.2298305942885740298798745389999999999985533886437633821023176397460230564219474391762787490733899176120758056640625E+4", AsString);

            using mpfr_t c = mpfr_t.Pow(a, b);

            AsString = c.ToString();
            Assert.AreEqual("1.0303448098763502035415852902432875445786186382464386304618764812535941726961877312676131312750681374508882906544257535910622418E+334341", AsString);

            using mpfr_t d = a;
            using mpfr_t e = d.Log();
            using mpfr_t f = c.Log();
            using mpfr_t g = f / e;
            using mpfr_t h = g.Round();

            AsString = h.ToString();
            Assert.AreEqual("2.2298E+4", AsString);

            mpfr_t.DefaultPrecision = DefaultPrecision;
        }

        [TestMethod]
        public void ZetaULong()
        {
            string AsString;

            Assert.IsTrue(mpfr_t.LiveObjectCount() == 0);

            ulong DefaultPrecision = mpfr_t.DefaultPrecision;
            mpfr_t.DefaultPrecision = 0x1000;

            ulong a = 9614UL;

            using mpfr_t b = new();

            mpfr.zeta_ui(b, a, mpfr_rnd_t.MPFR_RNDN);
            AsString = b.ToString();
            Assert.AreEqual("1E+0", AsString);

            using mpfr_t c = new mpfr_t(a);
            AsString = c.ToString();
            Assert.AreEqual("9.614E+3", AsString);

            using mpfr_t d = new mpfr_t();
            mpfr.zeta(d, c, mpfr_rnd_t.MPFR_RNDN);

            AsString = d.ToString();
            Assert.AreEqual("1E+0", AsString);

            a >>= 2;

            using mpfr_t e = new();

            mpfr.zeta_ui(e, a, mpfr_rnd_t.MPFR_RNDN);
            AsString = e.ToString();
            Assert.AreEqualsString);

            using mpfr_t f = new mpfr_t(a);
            AsString = f.ToString();
            Assert.AreEqual("2.403E+3", AsString);

            using mpfr_t g = new mpfr_t();
            mpfr.zeta(g, f, mpfr_rnd_t.MPFR_RNDN);

            AsString = g.ToString();
            Assert.AreEqualsString);

            mpfr_t.DefaultPrecision = DefaultPrecision;
        }
    }
}
